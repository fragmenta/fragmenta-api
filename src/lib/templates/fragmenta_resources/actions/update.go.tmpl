package [[ .fragmenta_resource ]]actions

import (
	"github.com/fragmenta/auth/can"
	"github.com/fragmenta/router"
	"github.com/fragmenta/view"

	"github.com/fragmenta/fragmenta-app/src/lib/auth"
	"github.com/fragmenta/fragmenta-app/src/[[ .fragmenta_resources ]]"
)


// HandleUpdate handles the POST of the form to update a [[ .fragmenta_resource ]]
func HandleUpdate(context router.Context) error {

	// Find the [[ .fragmenta_resource ]]
	[[ .fragmenta_resource ]], err := [[ .fragmenta_resources ]].Find(context.ParamInt("id"))
	if err != nil {
		return router.NotFoundError(err)
	}
	
	// Authorise update [[ .fragmenta_resource ]]
	err = can.Update([[ .fragmenta_resource ]], auth.CurrentUser(context))
	if err != nil {
		return router.NotAuthorizedError(err)
	}

	// Update the [[ .fragmenta_resource ]] from params
	params, err := context.Params()
	if err != nil {
		return router.InternalError(err)
	}

	// Validate the params, removing any we don't accept
	[[ .fragmenta_resource ]]Params := [[ .fragmenta_resource ]].ValidateParams(params.Map(), [[ .fragmenta_resources ]].AllowedParams())

	err = [[ .fragmenta_resource ]].Update([[ .fragmenta_resource ]]Params)
	if err != nil {
		return router.InternalError(err)
	}

	// Redirect to [[ .fragmenta_resource ]]
	return router.Redirect(context, [[ .fragmenta_resource ]].ShowURL())
}
