package [[ .fragmenta_resource ]]actions

import (
	"github.com/fragmenta/auth/can"
	"github.com/fragmenta/router"
	"github.com/fragmenta/view"

	"github.com/fragmenta/fragmenta-app/src/lib/auth"
	"github.com/fragmenta/fragmenta-app/src/[[ .fragmenta_resources ]]"
)

// HandleCreate handles the POST of the create form for [[ .fragmenta_resources ]]
func HandleCreate(context router.Context) error {
	

	[[ .fragmenta_resource ]] := [[ .fragmenta_resources ]].New()

	// Authorise
	err := can.Create([[ .fragmenta_resource ]], auth.CurrentUser(context))
	if err != nil {
		return router.NotAuthorizedError(err)
	}

	// Setup context
	params, err := context.Params()
	if err != nil {
		return router.InternalError(err)
	}

	// Validate the params, removing any we don't accept
	[[ .fragmenta_resource ]]Params := [[ .fragmenta_resource ]].ValidateParams(params.Map(), [[ .fragmenta_resources ]].AllowedParams())

	id, err := [[ .fragmenta_resource ]].Create([[ .fragmenta_resource ]]Params)
	if err != nil {
		return router.InternalError(err)
	}

	// Redirect to the new [[ .fragmenta_resource ]]
	[[ .fragmenta_resource ]], err = [[ .fragmenta_resources ]].Find(id)
	if err != nil {
		return router.InternalError(err)
	}

	return router.Redirect(context, [[ .fragmenta_resource ]].IndexURL())
}
